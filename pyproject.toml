[tool.poetry]
name = "toloboy"
version = "0.0.1"
description = "Utils for ML project on colorizing aereal historiacal images."
authors = [
    "Ruben Lopez <rjlopez2@gmail.com>",
]
license = "MIT"
readme = "README.md"

documentation = "https://rjlopez2.github.io/toloboy"
homepage = "https://rjlopez2.github.io/toloboy"
repository = "https://github.com/rjlopez2/toloboy"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]

packages = [
    { include = "toloboy", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.9.1, <4.0"
numpy = "^1.26.4"
matplotlib = "^3.9.0"
# torch = [
#     {version = "=2.1.0", source = "pypi", platform = "darwin"},
    # {platform = "linux", version = "2.3.0+cu121"},
    # {platform = "win32", version = "1.1.1"}
# ]
# torch = [
#     { version = "^2.2.0", source = "pypi", markers = "sys_platform == 'darwin'"},
#     { version = "^2.2.0", source = "pypi", markers = "platform_machine == 'aarch64' and sys_platform != 'darwin'"},
#     { version = "^2.2.0", source = "pytorch_cpu", markers = "platform_machine == 'x86_64' and sys_platform != 'darwin'" },
# ]
# [[tool.poetry.source]]
# name = "pytorch_cpu"
# url = "https://download.pytorch.org/whl/cpu"
# priority = "explicit"
pandas = "^2.2.2"
pillow = "^10.3.0"


[tool.poetry.group.dev.dependencies]
mkdocstrings = {version = ">=0.23", extras = ["python"]}
mkdocs-material = "*"
mypy = "*"
pre-commit = "*"
pymdown-extensions = "*"
pytest = "*"
pytest-github-actions-annotate-failures = "*"
pytest-cov = "*"
python-kacl = "*"
ruff = ">=0.2.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py38" # The lowest supported version

[tool.ruff.lint]
# By default, enable all the lint rules.
# Add to the ignore list below if you don't want some rules.
# If you need some ignores for certain modules, see tool.ruff.lint.per-file-ignores below.
# For individual ignore cases, prefer inline `# noqa`s within the code.
select = ["ALL"]
ignore = [
    "ANN",      # Type hints related, let mypy handle these.
    "D",        # Docstrings related, way too strict to our taste
    ]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101",     # "Use of `assert` detected"
    "ARG",      # "Unused function argument". Fixtures are often unused.
    "S105",     # "Possible hardcoded password".
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.pytest.ini_options]
addopts = """\
    --cov toloboy \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

[tool.coverage.report]
fail_under = 100
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
# This is the global mypy configuration.
# Avoid changing this!
strict = true  # See all the enabled flags `mypy --help | grep -A 10 'Strict mode'`
disallow_any_unimported = true

# If you need to ignore something for some specific module,
# add overrides for them. Avoid changing the global config!
# For example:
[[tool.mypy.overrides]]
module = [
 "pandas.*",
 "requests.*"
]
ignore_missing_imports = true

# [[tool.mypy.overrides]]
# module = [
#   "tests/my_thing/test_my_thing",
# ]
# disallow_untyped_defs = false
